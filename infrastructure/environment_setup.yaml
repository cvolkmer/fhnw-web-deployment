---
AWSTemplateFormatVersion: "2010-09-09"

Description: This template deploys a set of AWS resources needed to run the FHNW web deployment lab.

Parameters:
  DBInstanceID:
    Default: roomreservationInstance
    Description: Roomreservation database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: roomreservation
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '10'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

#  vpccidr:
#    Type: String
#    Default: 172.100.0.0/16
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
#  subpublicAcidr:
#    Type: String
#    Default: 172.100.1.0/24
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/xx
#  subpublicBcidr:
#    Type: String
#    Default: 172.100.2.0/24
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/xx
#  subprivateAcidr:
#    Type: String
#    Default: 172.100.101.0/24
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/xx
#  subprivateBcidr:
#    Type: String
#    Default: 172.100.102.0/24
#    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
#    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/xx

#  ecsservicerole:
#    Type: String
#    Default: "false"
#    AllowedValues:
#      - "true"
#      - "false"

#Conditions:

#  IAMECSServiceRole: !Equals [!Ref ecsservicerole, true]

Resources:

  ###############################################################
  ### VPC and Gateways

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 172.100.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Roomreservation-VPC

  IGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: Roomreservation-IGW

  GatewayAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  EIPNatGWA:
    DependsOn: GatewayAttach
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  EIPNatGWB:
    DependsOn: GatewayAttach
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPNatGWA.AllocationId
      SubnetId: !Ref SubnetPublicA
      Tags:
        - Key: Name
          Value: Roomreservation-NatGWA

  NatGatewayB:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPNatGWB.AllocationId
      SubnetId: !Ref SubnetPublicB
      Tags:
        - Key: Name
          Value: Roomreservation-NatGWB

  ###############################################################
  ### SUBNETs

  SubnetPublicA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: 172.100.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Roomreservation-PublicA

  SubnetPublicB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: 172.100.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Roomreservation-PublicB

  SubnetRouteTableAssociatePublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicA

  SubnetRouteTableAssociatePublicB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicB

  SubnetPrivateA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: 172.100.101.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Roomreservation-PrivateA

  SubnetPrivateB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: 172.100.102.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Roomreservation-PrivateB

  SubnetRouteTableAssociatePrivateA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePrivateA
      SubnetId: !Ref SubnetPrivateA

  SubnetRouteTableAssociatePrivateB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePrivateB
      SubnetId: !Ref SubnetPrivateB

  ###############################################################
  ### ROUTETABLEs

  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Roomreservation-Public

  RouteTablePrivateA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Roomreservation-PrivateA

  RouteTablePrivateB:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Roomreservation-PrivateB

  ###############################################################
  ### ROUTEs

  PublicDefaultRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTablePublic

  PrivateADefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      RouteTableId: !Ref RouteTablePrivateA

  PrivateBDefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB
      RouteTableId: !Ref RouteTablePrivateB


  ALBSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Roomreservation-ALB-SG
      GroupDescription: Allow HTTP from anywhere
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: ALB-SG
      VpcId: !Ref VPC #Dies referenziert auf eine exportierte Variable eines anderen Cloudformation stacks (network stack).

  ECSSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Roomreservation-ECS-SG
      GroupDescription: Allow HTTP from ALB
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSG
      Tags:
        - Key: Name
          Value: ECS-SG
      VpcId: !Ref VPC

  ###############################################################
  ### ECS

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: Roomreservation-Cluster
      ClusterSettings: 
        - Name: containerInsights
          Value: enabled

  MyContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: roomreservationtest2

  ###############################################################
  ### Cloud9

  MyCloud9Instance:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      AutomaticStopTimeMinutes: 60
      InstanceType: t3.medium
      Name: fhnw-web-deployment


  ###############################################################
  ### Cloudwatch

  ECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - ""
        - - /aws/ecs/
          - Roomreservation-Cluster
      RetentionInDays: 1

  ###############################################################
  ### ALB

  ALB:
    #DependsOn: S3LogBucketPolicy
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref SubnetPublicA #Dies referenziert auf eine exportierte Variable eines anderen Cloudformation stacks (network stack).
        - !Ref SubnetPublicB #Dies referenziert auf eine exportierte Variable eines anderen Cloudformation stacks (network stack).
      Tags:
        - Key: Name
          Value: ALB
      Type: application
      IpAddressType: ipv4

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        # -
        #   TargetGroupArn: !Ref TargetGroup
        #   Type: forward
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "You've reached the listener! Congrats!"
            StatusCode: "503"
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ###############################################################
  ### RDS

  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: MySQL
      EngineVersion: 8.0.16
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref MyDBSubnetGroup

  MyDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: DB Subnet group for FHNW roomreservation
      SubnetIds: 
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
    
  ###############################################################
  ### IAM

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: LogAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: "*"

#  ECSServiceLinkedRole:
#    Type: "AWS::IAM::ServiceLinkedRole"
#    Condition: IAMECSServiceRole
#    Properties:
#      AWSServiceName: ecs.amazonaws.com


###############################################################
### Outputs
###############################################################
Outputs:
  VPC:
    Value: !Ref VPC
    Description: VPC
  IGW:
    Value: !Ref IGW
    Description: IGW
  AvailabilityZone1:
    Value: !GetAtt SubnetPrivateA.AvailabilityZone
    Export:
      Name: AvailabilityZone1
  AvailabilityZone2:
    Value: !GetAtt SubnetPrivateB.AvailabilityZone
    Export:
      Name: AvailabilityZone2
  SubnetPublicA:
    Value: !Ref SubnetPublicA
    Description: Public Subnet A Id
  SubnetPublicB:
    Value: !Ref SubnetPublicB
    Description: Public Subnet B Id
  SubnetPrivateA:
    Value: !Ref SubnetPrivateA
    Description: Private Subnet A Id
  SubnetPrivateB:
    Value: !Ref SubnetPrivateB
    Description: Private Subnet B Id
  RouteTablePublic:
    Value: !Ref RouteTablePublic
    Description: Public Route Table
  RouteTablePrivateA:
    Value: !Ref RouteTablePrivateA
    Description: Private A Route Table
  RouteTablePrivateB:
    Value: !Ref RouteTablePrivateB
    Description: Private B Route Table

  ECSCluster:
    Value: !Ref ECSCluster
    Description: ECS Cluster Name
    Export:
      Name: ECS-Cluster
  ALBSG:
    Value: !Ref ALBSG
    Description: Security Group Id that is attached to the ALB
    Export:
      Name: ALB-SG
  ALB:
    Value: !Ref ALB
    Description: Loadbalancer
    Export:
      Name: ALB
  ALBListener:
    Value: !Ref Listener
    Description: ALB Listener
    Export:
      Name: ALB-Listener
  ALBDNSName:
    Value: !GetAtt ALB.DNSName
    Description: Loadbalancer DNS Name
    Export:
      Name: ALB-DNS
  ECSTaskExecutionRole:
    Value: !Ref ECSTaskExecutionRole
    Description: ECS Task Execution Role
    Export:
      Name: ECSTaskExecutionRole